Why Worry About Architecture?


*Structure - Like a house, software needs a structure: the way we organize our code

*Maintainability - A project is never done! We need to be able to easily change it in the future.

*Expandability - We also need to be able to easily add new features.

*The perfect architecture 
- Having a good structure, maintainability, and expandability.
- We can create our own architecture. (Mapty Project)
- We can use a well-established architecture pattern like MVC, MVP, Flux, etc. (this project)

- We can use a framework like React, Angular, Vue, Svelte, etc.


Components of any Architecture

*Business Logic
- Code that solves the actual business problem;
- Directly related to what business does and what it needs;
- Ex. Sending messages, storing transactions, calculating taxes, ...

*State
- Essentially stores all the data about the application.
- Should be the "single source of truth".
- UI should be kept in sync with the State.
- State Libraries exist (Redux, MobX)

*HTTP Library
- Responsible for making and receiving AJAX requests
- Optional but almost always necessary in real-world apps

*Application Logic (Router)
- Code that is only concerned about the implementation of application itself;
- Handles navigation and UI events

*Presentation Logic (UI Layer)
- Code that is concerned about the visible part of the application
- Essentially displays application state.


The Model-View-Controller (MVC) Architecture

*Model
- Business Logic
- State
- HTTP Library 
- Web (API)

*Controller
- Application Logic
- Bridge between model and views (which don't know about one another)
- Handles UI events and dispatches tasks to model and view

*View
- Presentation Logic
- User


MVC Implementation (Recipe Display Only)

Module model.js
export state
recipe{}
search{}
bookmark[]
_____________
export loadRecipe()


Module controller.js
controlRecipes()
init()


Class RecipeView
_data
_parentEl
______________
render()
_generateMarkup()
renderSpinner()
addHandlerRender()